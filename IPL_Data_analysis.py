# -*- coding: utf-8 -*-
"""DS Assignments(After MST).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HEtP-5BmBR66kbaIQILh8E2428cWnSYF

# Assignment -7

Ques 1:
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("sales_data.csv")
df.head()

x = df['month_number']
y = df['total_profit']
plt.plot(x,y)
plt.xlabel('Month Number')
plt.ylabel('Total Profit')
plt.title('Company Profit Per month')
plt.show()

"""Ques 2:"""

plt.plot(x,y,'r--',marker='.',markerfacecolor='green', label="Profit Data of last year",linewidth=3,markersize=12)
plt.xlabel('Month Number')
plt.ylabel('Sold units number')
plt.title('Company Sales data last year')
plt.legend(loc="lower right")
plt.show()

"""Ques 3:"""

df.head()

a = df['facecream']
b = df['facewash']
c = df['toothpaste']
d = df['bathingsoap']
e = df['shampoo']
f = df['moisturizer']

plt.figure(figsize=(8,6))

plt.plot(x,a,label="Face Cream sales data",marker='.', markersize=12)
plt.plot(x,b, label="Face Wash sales data",marker='.', markersize=12)
plt.plot(x,c, label="Toothpaste sales data",marker='.', markersize=12)
plt.plot(x,d, label="Bathing Soap sales data",marker='.', markersize=12)
plt.plot(x,e, label = "Shampoo sales data",marker='.', markersize=12)
plt.plot(x,f,label="Moisturizer sales data",marker='.', markersize=12)

plt.xlabel("Month Number")
plt.ylabel("Sales units in number")
plt.title("Sales data")
plt.legend()
plt.show()

"""Ques 4:"""

plt.scatter(x,c, label="Toothpaste Sales data")
plt.grid(linestyle='--',linewidth=1)  #grids on
plt.xlabel('Month Number')
plt.ylabel('NUmber of units sold')
plt.title('Toothpaste sales data')
plt.legend()
plt.show()

"""Ques 5:"""

plt.bar(x-0.3,a,width=0.3, label="Face Cream Sales Data")
plt.bar(x,b,width=0.3,label="Face Wash Sales data")


plt.legend(loc="upper left")
plt.grid(linestyle='--', linewidth=1)
plt.xlabel("Month Number")
plt.ylabel("Sales units in number")
plt.title("Facewash and facecream sales data")
plt.show()

"""Ques 6:"""

plt.bar(x,d)
plt.grid(linestyle="--", linewidth=1)

plt.ylabel("Sales units in number")
plt.xlabel("Month Number")
plt.title("Bathingsoap sales data")
plt.show()

"""Ques 7:"""

df.head()

profitList = df['total_profit']
labels = ['low','average','Good','Best']
profit_range = [150000,175000,200000,225000,250000,300000,350000]

plt.hist(profitList, profit_range,label=labels)
plt.xlabel('Profit range in dollar')
plt.ylabel('Actul profit in dollar')
plt.legend(loc='upper left')
plt.xticks(profit_range)
plt.title('Profit Data')
plt.show()

"""Ques 8:"""

sum = []
for i in range(1,7):
  sum.append(df.iloc[:,i].sum())

print(sum)

df1 = pd.DataFrame(sum)
pieLabels = ['FaceCream','FaceWash','ToothPaste','Bathing Soap','Shampoo', 'Moisturizer']

plt.pie(df1, labels = pieLabels,autopct = "%1.1f%%")
plt.legend(loc=4)
plt.show()

"""Ques 9:"""

monthList  = df ['month_number']
bathingsoap   = df ['bathingsoap']
faceWashSalesData   = df ['facewash']

f, axarr = plt.subplots(2, sharex=True)
axarr[0].plot(monthList, bathingsoap, label = 'Bathingsoap Sales Data', color='k', marker='o', linewidth=3)
axarr[0].set_title('Sales data of  a Bathingsoap')
axarr[1].plot(monthList, faceWashSalesData, label = 'Face Wash Sales Data', color='r', marker='o', linewidth=3)
axarr[1].set_title('Sales data of  a facewash')

plt.xticks(monthList)
plt.xlabel('Month Number')
plt.ylabel('Sales units in number')
plt.show()

"""Ques 10:"""

df.head()

a = df['facecream']
b = df['facewash']
c = df['toothpaste']
d = df['bathingsoap']
e = df['shampoo']
f = df['moisturizer']

x = df['month_number']


plt.stackplot(x,a,b,c,d,e,f, labels=['Face Cream', 'Face Wash', 'Tooth paste', 'Bathing soap', 'Shampoo', 'Mositurizer'], colors=['m','c','r','k','g','y'])
# plt.stackplot(x,b)
# plt.stackplot(x,c)
# plt.stackplot(x,d)
# plt.stackplot(x,e)
# plt.stackplot(x,f)
plt.legend(loc="upper left")
plt.xlabel("Month Number")
plt.ylabel("Sales units in Number")
plt.title("All product sales data using stack plot")
plt.show()

"""# Assignment -8

Program 1: Develop a Python program to extract the features of a protein sequence file (download
from LMS).
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("proteinSequenceFile1.csv")
df.head()

new_df = pd.DataFrame()

import string
for i in range(len(df)):
  dic = {}
  for j in string.ascii_letters:
    dic[j.upper()] = df['Sequence'][i].count(j.upper())
  dic['Class'] = df['Class'][i]
  new_df=new_df.append(dic,ignore_index=True)

new_df['Class'] = new_df['Class'].replace('+','1')
new_df['Class'] = new_df['Class'].replace('-','0')
x = new_df['Class']
y = new_df.drop('Class',axis=1)

new_df = pd.concat([y,x], axis=1)
new_df.head()

new_df.to_csv("result-101903328.csv")

log_df = pd.DataFrame()
for i in range(len(df)):
  dic = {}
  if(not(df['Sequence'][i].isalpha()) or (df['Class'][i]!='+' and df['Class'][i]!='-')):
    dic['Class'] = df['Class'][i]
    dic['Sequence'] = df['Sequence'][i]
    dic['Filename'] = 'proteinSequence1.csv'
    log_df=log_df.append(dic,ignore_index=True)

log_df.head()

log_df.to_csv("log-101903328.csv")

"""Program 2: Write a program to implement TOPSIS (Download topsis.csv from LMS)"""

topsis_df = pd.read_csv("topsis.csv")
topsis_df.head()

df = topsis_df.drop('Model',axis=1)
df

#Step 1: Calculation of Root Sum squares
rootSumSquares = []
for i in df.columns:
  sum = 0
  for j in df[i]:
    sum += (j**2)
  sum = sum**0.5
  rootSumSquares.append(sum)

j=0;
for i in df.columns:
  df[i]/=rootSumSquares[j]
  j = j+1

df

#Step 2:Multiplying weights to each value
wts = [0.25]*len(df.columns)

j=0
for i in df.columns:
  df[i] *= wts[j]
  j = j+1

df

#Step 3: Finding out ideal best and ideal worst values
idlBest = []
idlWorst = []

for i in df.columns:
  idlBest.append(max(df[i]))
  idlWorst.append(min(df[i]))

print(idlBest)
print(idlWorst)

#Step 4: Finding out the euclidean distance
eucBest = []
eucWorst = []

for i in range(len(df)):
  temp1=0
  temp2=0
  for j in range(len(df.columns)):
    temp1 += (df.iloc[i,j]-idlBest[j])**2
    temp2 += (df.iloc[i,j]-idlWorst[j])**2

  eucBest.append(temp1**0.5)
  eucWorst.append(temp2**0.5)

# for i in range(len(df)):
#   for j in df.columns:
#     print(j)
#     print(df[j][i])

print(eucBest)
print(eucWorst)

#Step 5: Finding out performance score
topsis_score = []
for i in range(len(df)):
   topsis_score.append(eucWorst[i]/(eucBest[i]+eucWorst[i]))

#Step 6: Calculating the final result
topsis_df['Topsis Score'] = topsis_score
topsis_df['Rank'] = topsis_df['Topsis Score'].rank(ascending=False)   #Do without .rank function
topsis_df

"""# Assignment -9"""

import networkx as nx

G = nx.Graph()
G.add_nodes_from([1,2,3,4,7,9])
nx.draw(G, with_labels=True)

G.add_edges_from([(1, 2), (1, 3),(1,9),(1,7),(1,4),(2,9),(2,4)])
nx.draw(G,with_labels=True)

G.remove_edge(1,2)
nx.draw(G,with_labels=True)

import matplotlib.pyplot as plt


SG = nx.Graph()
SG.add_node("City A")
SG.add_node("City B")
SG.add_node("City C")
SG.add_node("City D")

SG.add_edge("City A", "City B", weight = 10)
SG.add_edge("City A", "City C", weight = 15)
SG.add_edge("City A", "City D", weight = 20)
SG.add_edge("City D", "City B", weight = 25)
SG.add_edge("City D", "City C", weight = 30)
SG.add_edge("City B", "City C", weight = 35)

SG.nodes['City A']['pos'] = (0,3)
SG.nodes['City B']['pos'] = (-2,-0.5)
SG.nodes['City C']['pos'] = (2,-0.5)
SG.nodes['City D']['pos'] = (0,1)

node_pos = nx.get_node_attributes(SG,'pos')
arc_weight = nx.get_edge_attributes(SG,'weight')

nx.draw_networkx(SG,node_pos, node_color='r',node_size=450)

nx.draw_networkx_edges(SG,node_pos, edge_color='k')

nx.draw_networkx_edge_labels(SG, node_pos,edge_labels=arc_weight)

plt.axis('off')
plt.show()

DG = nx.DiGraph()
DG.add_edge("A", "B", weight=4)
DG.add_edge("A", "C", weight=12)
DG.add_edge("A", "D", weight=7)
DG.add_edge("B", "A", weight=5)
DG.add_edge("B", "D", weight=18)
DG.add_edge("C", "A", weight=11)
DG.add_edge("C", "D", weight=6)
DG.add_edge("D", "A", weight=10)
DG.add_edge("D", "B", weight=2)
DG.add_edge("D", "C", weight=3)


DG.nodes['A']['pos'] = (0,2)
DG.nodes['B']['pos'] = (0,0)
DG.nodes['C']['pos'] = (2,2)
DG.nodes['D']['pos'] = (2,0)

node_pos = nx.get_node_attributes(DG,'pos')
arc_pos = nx.get_edge_attributes(DG,'weight')

nx.draw_networkx(DG, node_pos, node_color='r', node_size=450)
nx.draw_networkx_edges(DG, node_pos, edge_color='k')
nx.draw_networkx_edge_labels(DG, node_pos, edge_labels=arc_pos)

plt.axis('off')
plt.show()

MG = nx.MultiGraph()
MG.add_edge("A", "B", weight=4)
MG.add_edge("A", "C", weight=12)
MG.add_edge("A", "D", weight=7)
MG.add_edge("B", "A", weight=5)
MG.add_edge("B", "D", weight=18)
MG.add_edge("C", "A", weight=11)
MG.add_edge("C", "D", weight=6)
MG.add_edge("D", "A", weight=10)
MG.add_edge("D", "B", weight=2)
MG.add_edge("D", "C", weight=3)

MG.nodes['A']['pos'] = (0,2)
MG.nodes['B']['pos'] = (0,0)
MG.nodes['C']['pos'] = (2,2)
MG.nodes['D']['pos'] = (2,0)

node_pos = nx.get_node_attributes(MG,'pos')
arc_pos = nx.get_edge_attributes(MG,'weight')

nx.draw_networkx_nodes(MG, node_pos, node_color = 'r', node_size = 450)
nx.draw_networkx_edges(MG, node_pos, edge_color='k')
# nx.draw_networkx_edge_labels(MG, node_pos, edge_labels=arc_pos)

ax = plt.gca()
# for e in MG.edges:
#     ax.annotate("",
#                 xy=pos[e[0]], xycoords='data',
#                 xytext=pos[e[1]], textcoords='data',
#                 arrowprops=dict(arrowstyle="->", color="0.5",
#                                 shrinkA=5, shrinkB=5,
#                                 patchA=None, patchB=None,
#                                 connectionstyle="arc3,rad=rrr".replace('rrr',str(0.3*e[2])
#                                 ),
#                                 ),
#                 )
plt.axis('off')
plt.show()

h = DG.to_undirected()

DG.nodes['A']['pos'] = (0,2)
DG.nodes['B']['pos'] = (0,0)
DG.nodes['C']['pos'] = (2,2)
DG.nodes['D']['pos'] = (2,0)

node_pos = nx.get_node_attributes(h,'pos')
arc_pos1 = nx.get_edge_attributes(h,'weight')

nx.draw_networkx(h, node_pos, node_color='g', node_size=450)
nx.draw_networkx_edges(h, node_pos, edge_color='k')
nx.draw_networkx_edge_labels(h, node_pos, edge_labels=arc_pos1)

plt.axis('off')
plt.show()